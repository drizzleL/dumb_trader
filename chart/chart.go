package chart

import (
	"os"
	"time"

	"github.com/drizzleL/dumb_trader/model"
	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
	"github.com/shopspring/decimal"
)

func getKlineData(lines []*model.Data) (ret []opts.KlineData) {
	for _, line := range lines {
		ret = append(ret, opts.KlineData{
			Value: []string{line.Open.String(), line.Close.String(), line.Low.String(), line.High.String()},
		})
	}
	return
}

func getLineData(lines []decimal.Decimal) (ret []opts.LineData) {
	for _, line := range lines {
		ret = append(ret, opts.LineData{
			Value: line})
	}
	return
}

func PrintMacd(klines *model.Klines, f *os.File) {
	bar := charts.NewLine()
	bar.SetGlobalOptions(
		charts.WithTitleOpts(opts.Title{
			Title:    "My first bar chart generated by go-echarts",
			Subtitle: "It's extremely easy to use, right?",
		}),
		charts.WithYAxisOpts(opts.YAxis{
			Scale: true,
		}),
		charts.WithInitializationOpts(opts.Initialization{
			Width:  "1200px", // 设置画布宽度
			Height: "600px",  // 设置画布高度
		}),
		charts.WithTooltipOpts(opts.Tooltip{
			Show:    true,
			Trigger: "axis",
		}),
	)

	// Put data into instance
	xaxis := []string{}
	for _, line := range klines.Original {
		xaxis = append(xaxis, time.UnixMilli(line.CloseTime).Format("2006-01-02 15:04:05"))
	}
	bar.SetXAxis(xaxis)
	bar.AddSeries("macd", getLineData(klines.Data["macd"]))
	bar.Render(f)
}
func PrintKline(klines *model.Klines, f *os.File) {
	kl := charts.NewKLine()

	kl.SetGlobalOptions(
		charts.WithTitleOpts(opts.Title{
			Title:    "My first bar chart generated by go-echarts",
			Subtitle: "It's extremely easy to use, right?",
		}),
		charts.WithYAxisOpts(opts.YAxis{
			Scale: true,
		}),
		charts.WithInitializationOpts(opts.Initialization{
			Width:  "1200px", // 设置画布宽度
			Height: "600px",  // 设置画布高度
		}),
		charts.WithTooltipOpts(opts.Tooltip{
			Show:    true,
			Trigger: "axis",
		}),
		charts.WithDataZoomOpts(opts.DataZoom{}),
	)

	// Put data into instance
	xaxis := []string{}
	for _, line := range klines.Original {
		xaxis = append(xaxis, time.UnixMilli(line.CloseTime).Format("2006-01-02 15:04:05"))
	}
	kl.SetXAxis(xaxis)

	kl.AddSeries("data", getKlineData(klines.ProcessedData))
	kl.Overlap(getEmaLine(klines))
	kl.Overlap(getSar(klines))

	kl.Render(f)
}

func getSar(klines *model.Klines) *charts.Scatter {
	line := charts.NewScatter()
	// xaxis := []string{}
	// for _, line := range klines.Original {
	// 	xaxis = append(xaxis, time.UnixMilli(line.CloseTime).Format("2006-01-02 15:04:05"))
	// }
	// line.SetXAxis(xaxis)
	line.AddSeries("sar", getSarData(klines))
	return line
}

func getSarData(klines *model.Klines) (ret []opts.ScatterData) {
	for _, line := range klines.Data["sar"] {
		ret = append(ret, opts.ScatterData{
			Value: line.String(),
		})
	}
	return
}

func getEmaLine(klines *model.Klines) *charts.Line {
	line := charts.NewLine()
	line.SetGlobalOptions(
		charts.WithTitleOpts(opts.Title{
			Title:    "My first bar chart generated by go-echarts",
			Subtitle: "It's extremely easy to use, right?",
		}),
		charts.WithYAxisOpts(opts.YAxis{
			Scale: true,
		}),
		charts.WithInitializationOpts(opts.Initialization{
			Width:  "1200px", // 设置画布宽度
			Height: "600px",  // 设置画布高度
		}),
		charts.WithTooltipOpts(opts.Tooltip{
			Show:    true,
			Trigger: "axis",
		}),
		charts.WithDataZoomOpts(opts.DataZoom{}),
	)

	// Put data into instance
	xaxis := []string{}
	for _, line := range klines.Original {
		xaxis = append(xaxis, time.UnixMilli(line.CloseTime).Format("2006-01-02 15:04:05"))
	}
	line.SetXAxis(xaxis)
	line.AddSeries("ma10", getLineData(klines.Data["ma10"]))
	line.AddSeries("ma20", getLineData(klines.Data["ma20"]))
	line.AddSeries("ma60", getLineData(klines.Data["ma60"]))
	line.AddSeries("ma120", getLineData(klines.Data["ma120"]))

	line.AddSeries("ema10", getLineData(klines.Data["ema10"]))
	line.AddSeries("ema20", getLineData(klines.Data["ema20"]))
	line.AddSeries("ema60", getLineData(klines.Data["ema60"]))
	line.AddSeries("ema120", getLineData(klines.Data["ema120"]))
	return line
}
